SELECT setting::integer < 100000 AS pre_10,
       setting::integer < 120000 AS pre_12
FROM pg_settings WHERE name = 'server_version_num';
 pre_10 | pre_12 
--------+--------
 f      | f
(1 row)

/* Run tests as unprivileged user */
SET ROLE TO periods_unprivileged_user;
/*
 * Create a sequence to test non-serial primary keys.  This actually tests
 * things like uuid primary keys, but makes for reproducible test cases.
 */
CREATE SEQUENCE pricing_seq;
CREATE TABLE pricing (id1 bigserial,
                      id2 bigint PRIMARY KEY DEFAULT nextval('pricing_seq'),
                      id3 bigint GENERATED ALWAYS AS IDENTITY,
                      id4 bigint GENERATED ALWAYS AS (id1 + id2) STORED,
                      product text, min_quantity integer, max_quantity integer, price numeric);
CREATE TABLE pricing (id1 bigserial,
                      id2 bigint PRIMARY KEY DEFAULT nextval('pricing_seq'),
                      id3 bigint GENERATED ALWAYS AS IDENTITY,
                      product text, min_quantity integer, max_quantity integer, price numeric);
ERROR:  relation "pricing" already exists
CREATE TABLE pricing (id1 bigserial,
                      id2 bigint PRIMARY KEY DEFAULT nextval('pricing_seq'),
                      product text, min_quantity integer, max_quantity integer, price numeric);
ERROR:  relation "pricing" already exists
SELECT periods.add_period('pricing', 'quantities', 'min_quantity', 'max_quantity');
 add_period 
------------
 t
(1 row)

SELECT periods.add_for_portion_view('pricing', 'quantities');
 add_for_portion_view 
----------------------
 t
(1 row)

TABLE periods.for_portion_views;
 table_name | period_name |             view_name              |       trigger_name        
------------+-------------+------------------------------------+---------------------------
 pricing    | quantities  | pricing__for_portion_of_quantities | for_portion_of_quantities
(1 row)

/* Test UPDATE FOR PORTION */
INSERT INTO pricing (product, min_quantity, max_quantity, price) VALUES ('Trinket', 1, 20, 200);
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   1 |   1 |   1 |   2 | Trinket |            1 |           20 |   200
(1 row)

-- UPDATE fully preceding
UPDATE pricing__for_portion_of_quantities SET min_quantity = 0, max_quantity = 1, price = 0;
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   1 |   1 |   1 |   2 | Trinket |            1 |           20 |   200
(1 row)

-- UPDATE fully succeeding
UPDATE pricing__for_portion_of_quantities SET min_quantity = 30, max_quantity = 50, price = 0;
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   1 |   1 |   1 |   2 | Trinket |            1 |           20 |   200
(1 row)

-- UPDATE fully surrounding
UPDATE pricing__for_portion_of_quantities SET min_quantity = 0, max_quantity = 100, price = 100;
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   1 |   1 |   1 |   2 | Trinket |            1 |           20 |   100
(1 row)

-- UPDATE portion
UPDATE pricing__for_portion_of_quantities SET min_quantity = 10, max_quantity = 20, price = 80;
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   2 |   2 |   2 |   4 | Trinket |            1 |           10 |   100
   1 |   1 |   1 |   2 | Trinket |           10 |           20 |    80
(2 rows)

-- UPDATE portion of multiple rows
UPDATE pricing__for_portion_of_quantities SET min_quantity = 5, max_quantity = 15, price = 90;
TABLE pricing ORDER BY min_quantity;
 id1 | id2 | id3 | id4 | product | min_quantity | max_quantity | price 
-----+-----+-----+-----+---------+--------------+--------------+-------
   3 |   3 |   3 |   6 | Trinket |            1 |            5 |   100
   2 |   2 |   2 |   4 | Trinket |            5 |           10 |    90
   1 |   1 |   1 |   2 | Trinket |           10 |           15 |    90
   4 |   4 |   4 |   8 | Trinket |           15 |           20 |    80
(4 rows)

-- If we drop the period (without CASCADE) then the FOR PORTION views should be
-- dropped, too.
SELECT periods.drop_period('pricing', 'quantities');
 drop_period 
-------------
 t
(1 row)

TABLE periods.for_portion_views;
 table_name | period_name | view_name | trigger_name 
------------+-------------+-----------+--------------
(0 rows)

-- Add it back to test the drop_for_portion_view function
SELECT periods.add_period('pricing', 'quantities', 'min_quantity', 'max_quantity');
 add_period 
------------
 t
(1 row)

SELECT periods.add_for_portion_view('pricing', 'quantities');
 add_for_portion_view 
----------------------
 t
(1 row)

-- We can't drop the the table without first dropping the FOR PORTION views
-- because Postgres will complain about dependant objects (our views) before we
-- get a chance to clean them up.
DROP TABLE pricing;
ERROR:  cannot drop table pricing because other objects depend on it
DETAIL:  view pricing__for_portion_of_quantities depends on table pricing
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
SELECT periods.drop_for_portion_view('pricing', NULL);
 drop_for_portion_view 
-----------------------
 t
(1 row)

TABLE periods.for_portion_views;
 table_name | period_name | view_name | trigger_name 
------------+-------------+-----------+--------------
(0 rows)

DROP TABLE pricing;
DROP SEQUENCE pricing_seq;
/* Types without btree must be excluded, too */
-- v10+
CREATE TABLE bt (
    id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    pt point,   -- something without btree
    t text,     -- something with btree
    s integer,
    e integer
);
-- pre v10
CREATE TABLE bt (
    id serial PRIMARY KEY,
    pt point,   -- something without btree
    t text,     -- something with btree
    s integer,
    e integer
);
ERROR:  relation "bt" already exists
SELECT periods.add_period('bt', 'p', 's', 'e');
 add_period 
------------
 t
(1 row)

SELECT periods.add_for_portion_view('bt', 'p');
 add_for_portion_view 
----------------------
 t
(1 row)

INSERT INTO bt (pt, t, s, e) VALUES ('(0, 0)', 'sample', 10, 40);
TABLE bt ORDER BY s, e;
 id |  pt   |   t    | s  | e  
----+-------+--------+----+----
  1 | (0,0) | sample | 10 | 40
(1 row)

UPDATE bt__for_portion_of_p SET t = 'simple', s = 20, e = 30;
TABLE bt ORDER BY s, e;
 id |  pt   |   t    | s  | e  
----+-------+--------+----+----
  2 | (0,0) | sample | 10 | 20
  1 | (0,0) | simple | 20 | 30
  3 | (0,0) | sample | 30 | 40
(3 rows)

SELECT periods.drop_for_portion_view('bt', 'p');
 drop_for_portion_view 
-----------------------
 t
(1 row)

DROP TABLE bt;
